#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GamerTag_db")]
public partial class GamerTagDBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEvent(Event instance);
  partial void UpdateEvent(Event instance);
  partial void DeleteEvent(Event instance);
  partial void InsertTag(Tag instance);
  partial void UpdateTag(Tag instance);
  partial void DeleteTag(Tag instance);
  #endregion
	
	public GamerTagDBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GamerTag_dbConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public GamerTagDBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GamerTagDBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GamerTagDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GamerTagDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Event> Events
	{
		get
		{
			return this.GetTable<Event>();
		}
	}
	
	public System.Data.Linq.Table<Tag> Tags
	{
		get
		{
			return this.GetTable<Tag>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private EntitySet<Tag> _Tags;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Event()
	{
		this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Tag", Storage="_Tags", ThisKey="Id", OtherKey="EventId")]
	public EntitySet<Tag> Tags
	{
		get
		{
			return this._Tags;
		}
		set
		{
			this._Tags.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Tags(Tag entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_Tags(Tag entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Nullable<int> _EventId;
	
	private string _name;
	
	private string _live;
	
	private string _psn;
	
	private string _steam;
	
	private string _wiiu;
	
	private string _games;
	
	private string _delkey;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(System.Nullable<int> value);
    partial void OnEventIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnliveChanging(string value);
    partial void OnliveChanged();
    partial void OnpsnChanging(string value);
    partial void OnpsnChanged();
    partial void OnsteamChanging(string value);
    partial void OnsteamChanged();
    partial void OnwiiuChanging(string value);
    partial void OnwiiuChanged();
    partial void OngamesChanging(string value);
    partial void OngamesChanged();
    partial void OndelkeyChanging(string value);
    partial void OndelkeyChanged();
    #endregion
	
	public Tag()
	{
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int")]
	public System.Nullable<int> EventId
	{
		get
		{
			return this._EventId;
		}
		set
		{
			if ((this._EventId != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIdChanging(value);
				this.SendPropertyChanging();
				this._EventId = value;
				this.SendPropertyChanged("EventId");
				this.OnEventIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_live", DbType="NVarChar(50)")]
	public string live
	{
		get
		{
			return this._live;
		}
		set
		{
			if ((this._live != value))
			{
				this.OnliveChanging(value);
				this.SendPropertyChanging();
				this._live = value;
				this.SendPropertyChanged("live");
				this.OnliveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_psn", DbType="NVarChar(50)")]
	public string psn
	{
		get
		{
			return this._psn;
		}
		set
		{
			if ((this._psn != value))
			{
				this.OnpsnChanging(value);
				this.SendPropertyChanging();
				this._psn = value;
				this.SendPropertyChanged("psn");
				this.OnpsnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_steam", DbType="NVarChar(50)")]
	public string steam
	{
		get
		{
			return this._steam;
		}
		set
		{
			if ((this._steam != value))
			{
				this.OnsteamChanging(value);
				this.SendPropertyChanging();
				this._steam = value;
				this.SendPropertyChanged("steam");
				this.OnsteamChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wiiu", DbType="NVarChar(50)")]
	public string wiiu
	{
		get
		{
			return this._wiiu;
		}
		set
		{
			if ((this._wiiu != value))
			{
				this.OnwiiuChanging(value);
				this.SendPropertyChanging();
				this._wiiu = value;
				this.SendPropertyChanged("wiiu");
				this.OnwiiuChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_games", DbType="NVarChar(50)")]
	public string games
	{
		get
		{
			return this._games;
		}
		set
		{
			if ((this._games != value))
			{
				this.OngamesChanging(value);
				this.SendPropertyChanging();
				this._games = value;
				this.SendPropertyChanged("games");
				this.OngamesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delkey", DbType="NChar(6)")]
	public string delkey
	{
		get
		{
			return this._delkey;
		}
		set
		{
			if ((this._delkey != value))
			{
				this.OndelkeyChanging(value);
				this.SendPropertyChanging();
				this._delkey = value;
				this.SendPropertyChanged("delkey");
				this.OndelkeyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Tag", Storage="_Event", ThisKey="EventId", OtherKey="Id", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.Tags.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.Tags.Add(this);
					this._EventId = value.Id;
				}
				else
				{
					this._EventId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
